import numpy as np
import torch

from damri.model.unet3D import UNet3D
from dpipe.train.policy import Schedule
from dpipe.torch.functional import weighted_cross_entropy_with_logits
from dpipe.torch import inference_step
from dpipe.predict import divisible_shape, add_extract_dims, patches_grid


# loss
criterion = weighted_cross_entropy_with_logits

# model
architecture = UNet3D(n_chans_in=n_chans_in, n_chans_out=n_chans_out)

x_patch_size = y_patch_size = np.array([64] * 3)
batch_size = 7
# = 15.2 GB GPU memory

# optimizer
batches_per_epoch = 100
n_epochs = 100

# optimizer
lr_init = 1e-3
lr = Schedule(initial=lr_init, epoch2value_multiplier={80: 0.1, })

optimizer = torch.optim.SGD(
    architecture.parameters(),
    lr=lr_init,
    momentum=0.9,
    nesterov=True,
    weight_decay=0
)


# predict
pred_patch_size = np.array([128] * 3)
pred_patch_stride = np.array([112] * 3)


@add_extract_dims(n_add=2)
@patches_grid(pred_patch_size, pred_patch_stride)
@divisible_shape(divisor=[8] * 3, padding_values=np.min)
def predict(x):
    return inference_step(x, architecture=architecture, activation=torch.sigmoid)
